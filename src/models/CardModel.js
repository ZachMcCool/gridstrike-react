/**
 * Weapon model for cards
 */
export class Weapon {
  constructor({
    name = "",
    type = "Melee", // Melee or Ranged
    attackBonus = 0,
    range = "",
    damage = "",
    keywords = "",
  } = {}) {
    this.name = name;
    this.type = type;
    this.attackBonus = attackBonus;
    this.range = range;
    this.damage = damage;
    this.keywords = keywords;
  }

  /**
   * Create a Weapon from API response
   */
  static fromJSON(data) {
    return new Weapon(data);
  }

  /**
   * Convert to plain object for API requests
   */
  toJSON() {
    return {
      name: this.name,
      type: this.type,
      attackBonus: this.attackBonus,
      range: this.range,
      damage: this.damage,
      keywords: this.keywords,
    };
  }
}

/**
 * Ability model for cards
 */
export class Ability {
  constructor({
    title = "",
    description = "",
    cost = null,
    passive = false,
  } = {}) {
    this.title = title;
    this.description = description;
    this.cost = cost;
    this.passive = passive;
  }

  /**
   * Create an Ability from API response
   */
  static fromJSON(data) {
    return new Ability(data);
  }

  /**
   * Convert to plain object for API requests
   */
  toJSON() {
    return {
      title: this.title,
      description: this.description,
      cost: this.cost,
      passive: this.passive,
    };
  }
}

/**
 * Condition model for status effects
 */
export class Condition {
  constructor({ name = "", effect = "" } = {}) {
    this.name = name;
    this.effect = effect;
  }

  /**
   * Create a Condition from API response
   */
  static fromJSON(data) {
    return new Condition(data);
  }

  /**
   * Convert to plain object for API requests
   */
  toJSON() {
    return {
      name: this.name,
      effect: this.effect,
    };
  }
}

/**
 * Keyword model - same structure as Condition
 */
export class Keyword {
  constructor({ name = "", effect = "" } = {}) {
    this.name = name;
    this.effect = effect;
  }

  /**
   * Create a Keyword from API response
   */
  static fromJSON(data) {
    return new Keyword(data);
  }

  /**
   * Convert to plain object for API requests
   */
  toJSON() {
    return {
      name: this.name,
      effect: this.effect,
    };
  }
}

/**
 * Main Card model
 */
export class CardModel {
  constructor({
    id = null, // Will be generated by MongoDB if null
    cardName = "",
    cardType = "Unit", // Unit, Spell, Equipment, Terrain
    faction = "",
    rarity = "Common",
    size = "", // e.g., "1x1", "Radius 3"
    type = "", // e.g. Human Druid, Beast
    token = false,
    keywords = [],

    // Unit-specific
    hp = 0,
    ac = 0,
    move = 0,
    weapons = [],
    abilities = [],

    // Spell & Equipment
    spellType = "", // Sorcery / Instant / Equipment
    energyCost = 0,
    range = "",
    effect = "",

    // Terrain
    auraType = "", // e.g., Passive Aura
    losBlocking = false, // Line of Sight Blocking
  } = {}) {
    this.id = id;
    this.cardName = cardName;
    this.cardType = cardType;
    this.faction = faction;
    this.rarity = rarity;
    this.size = size;
    this.type = type;
    this.token = token;
    this.keywords = Array.isArray(keywords) ? keywords : [];

    // Unit-specific
    this.hp = hp;
    this.ac = ac;
    this.move = move;
    this.weapons = weapons.map((w) =>
      w instanceof Weapon ? w : new Weapon(w)
    );
    this.abilities = abilities.map((a) =>
      a instanceof Ability ? a : new Ability(a)
    );

    // Spell & Equipment
    this.spellType = spellType;
    this.energyCost = energyCost;
    this.range = range;
    this.effect = effect;

    // Terrain
    this.auraType = auraType;
    this.losBlocking = losBlocking;
  }

  /**
   * Computed property - equivalent to C# IsDestructible property
   */
  get isDestructible() {
    return this.hp > 0;
  }

  /**
   * Create a CardModel from API response
   */
  static fromJSON(data) {
    return new CardModel({
      ...data,
      weapons: (data.weapons || []).map((w) => new Weapon(w)),
      abilities: (data.abilities || []).map((a) => new Ability(a)),
    });
  }

  /**
   * Convert to plain object for API requests
   */
  toJSON() {
    return {
      id: this.id,
      cardName: this.cardName,
      cardType: this.cardType,
      faction: this.faction,
      rarity: this.rarity,
      size: this.size,
      type: this.type,
      token: this.token,
      keywords: this.keywords,
      hp: this.hp,
      ac: this.ac,
      move: this.move,
      weapons: this.weapons.map((w) => w.toJSON()),
      abilities: this.abilities.map((a) => a.toJSON()),
      spellType: this.spellType,
      energyCost: this.energyCost,
      range: this.range,
      effect: this.effect,
      auraType: this.auraType,
      losBlocking: this.losBlocking,
    };
  }

  /**
   * Create a new card with default values for a specific type
   */
  static createDefault(cardType) {
    const defaults = {
      Unit: {
        cardType: "Unit",
        hp: 1,
        ac: 10,
        move: 6,
      },
      Spell: {
        cardType: "Spell",
        spellType: "Sorcery",
        energyCost: 1,
      },
      Equipment: {
        cardType: "Equipment",
        spellType: "Equipment",
        energyCost: 1,
      },
      Terrain: {
        cardType: "Terrain",
        hp: 0,
        losBlocking: false,
      },
    };

    return new CardModel(defaults[cardType] || {});
  }
}

// Card type constants
export const CARD_TYPES = {
  UNIT: "Unit",
  SPELL: "Spell",
  EQUIPMENT: "Equipment",
  TERRAIN: "Terrain",
};

// Weapon type constants
export const WEAPON_TYPES = {
  MELEE: "Melee",
  RANGED: "Ranged",
};

// Rarity constants
export const RARITIES = {
  COMMON: "Common",
  UNCOMMON: "Uncommon",
  RARE: "Rare",
  EPIC: "Epic",
  LEGENDARY: "Legendary",
};

// Spell type constants
export const SPELL_TYPES = {
  SORCERY: "Sorcery",
  INSTANT: "Instant",
  EQUIPMENT: "Equipment",
};
